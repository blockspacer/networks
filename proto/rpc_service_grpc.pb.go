// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/rpc_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatRpcClient is the client API for ChatRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcClient interface {
	SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	ReceiveMessage(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
	SendedMessages(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*FromResponse, error)
}

type chatRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcClient(cc grpc.ClientConnInterface) ChatRpcClient {
	return &chatRpcClient{cc}
}

func (c *chatRpcClient) SendMessage(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatRpc/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) ReceiveMessage(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatRpc/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRpcClient) SendedMessages(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*FromResponse, error) {
	out := new(FromResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatRpc/SendedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRpcServer is the server API for ChatRpc service.
// All implementations must embed UnimplementedChatRpcServer
// for forward compatibility
type ChatRpcServer interface {
	SendMessage(context.Context, *SendRequest) (*SendResponse, error)
	ReceiveMessage(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
	SendedMessages(context.Context, *FromRequest) (*FromResponse, error)
	mustEmbedUnimplementedChatRpcServer()
}

// UnimplementedChatRpcServer must be embedded to have forward compatible implementations.
type UnimplementedChatRpcServer struct {
}

func (UnimplementedChatRpcServer) SendMessage(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatRpcServer) ReceiveMessage(context.Context, *ReceiveRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedChatRpcServer) SendedMessages(context.Context, *FromRequest) (*FromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendedMessages not implemented")
}
func (UnimplementedChatRpcServer) mustEmbedUnimplementedChatRpcServer() {}

// UnsafeChatRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRpcServer will
// result in compilation errors.
type UnsafeChatRpcServer interface {
	mustEmbedUnimplementedChatRpcServer()
}

func RegisterChatRpcServer(s grpc.ServiceRegistrar, srv ChatRpcServer) {
	s.RegisterService(&ChatRpc_ServiceDesc, srv)
}

func _ChatRpc_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatRpc/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).SendMessage(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatRpc/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).ReceiveMessage(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRpc_SendedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRpcServer).SendedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatRpc/SendedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRpcServer).SendedMessages(ctx, req.(*FromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatRpc_ServiceDesc is the grpc.ServiceDesc for ChatRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatRpc",
	HandlerType: (*ChatRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatRpc_SendMessage_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _ChatRpc_ReceiveMessage_Handler,
		},
		{
			MethodName: "SendedMessages",
			Handler:    _ChatRpc_SendedMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc_service.proto",
}
